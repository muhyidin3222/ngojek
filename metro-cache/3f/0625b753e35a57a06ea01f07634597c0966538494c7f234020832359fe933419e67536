{"dependencies":[{"name":"object-assign","data":{"isAsync":false}},{"name":"fbjs/lib/invariant","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _assign = _$$_REQUIRE(_dependencyMap[0], \"object-assign\");\n\n  var invariant = _$$_REQUIRE(_dependencyMap[1], \"fbjs/lib/invariant\");\n\n  var hasOwnProperty = {}.hasOwnProperty;\n\n  function shallowCopy(x) {\n    if (Array.isArray(x)) {\n      return x.concat();\n    } else if (x && typeof x === 'object') {\n      return _assign(new x.constructor(), x);\n    } else {\n      return x;\n    }\n  }\n\n  var COMMAND_PUSH = '$push';\n  var COMMAND_UNSHIFT = '$unshift';\n  var COMMAND_SPLICE = '$splice';\n  var COMMAND_SET = '$set';\n  var COMMAND_MERGE = '$merge';\n  var COMMAND_APPLY = '$apply';\n  var ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];\n  var ALL_COMMANDS_SET = {};\n  ALL_COMMANDS_LIST.forEach(function (command) {\n    ALL_COMMANDS_SET[command] = true;\n  });\n\n  function invariantArrayCase(value, spec, command) {\n    invariant(Array.isArray(value), 'update(): expected target of %s to be an array; got %s.', command, value);\n    var specValue = spec[command];\n    invariant(Array.isArray(specValue), 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue);\n  }\n\n  function update(value, spec) {\n    invariant(typeof spec === 'object', 'update(): You provided a key path to update() that did not contain one ' + 'of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET);\n\n    if (hasOwnProperty.call(spec, COMMAND_SET)) {\n      invariant(Object.keys(spec).length === 1, 'Cannot have more than one key in an object with %s', COMMAND_SET);\n      return spec[COMMAND_SET];\n    }\n\n    var nextValue = shallowCopy(value);\n\n    if (hasOwnProperty.call(spec, COMMAND_MERGE)) {\n      var mergeObj = spec[COMMAND_MERGE];\n      invariant(mergeObj && typeof mergeObj === 'object', \"update(): %s expects a spec of type 'object'; got %s\", COMMAND_MERGE, mergeObj);\n      invariant(nextValue && typeof nextValue === 'object', \"update(): %s expects a target of type 'object'; got %s\", COMMAND_MERGE, nextValue);\n\n      _assign(nextValue, spec[COMMAND_MERGE]);\n    }\n\n    if (hasOwnProperty.call(spec, COMMAND_PUSH)) {\n      invariantArrayCase(value, spec, COMMAND_PUSH);\n      spec[COMMAND_PUSH].forEach(function (item) {\n        nextValue.push(item);\n      });\n    }\n\n    if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {\n      invariantArrayCase(value, spec, COMMAND_UNSHIFT);\n      spec[COMMAND_UNSHIFT].forEach(function (item) {\n        nextValue.unshift(item);\n      });\n    }\n\n    if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {\n      invariant(Array.isArray(value), 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value);\n      invariant(Array.isArray(spec[COMMAND_SPLICE]), 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]);\n      spec[COMMAND_SPLICE].forEach(function (args) {\n        invariant(Array.isArray(args), 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]);\n        nextValue.splice.apply(nextValue, args);\n      });\n    }\n\n    if (hasOwnProperty.call(spec, COMMAND_APPLY)) {\n      invariant(typeof spec[COMMAND_APPLY] === 'function', 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]);\n      nextValue = spec[COMMAND_APPLY](nextValue);\n    }\n\n    for (var k in spec) {\n      if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n        nextValue[k] = update(value[k], spec[k]);\n      }\n    }\n\n    return nextValue;\n  }\n\n  module.exports = update;\n});","map":[[2,0,8,0],[4,0,10,0],[4,6,10,4,"_assign"],[4,13,10,11],[4,16,10,14,"require"],[4,27,10,21],[4,63,10,0],[6,0,11,0],[6,6,11,4,"invariant"],[6,15,11,13],[6,18,11,16,"require"],[6,29,11,23],[6,70,11,0],[8,0,12,0],[8,6,12,4,"hasOwnProperty"],[8,20,12,18],[8,23,12,21],[8,26,12,24,"hasOwnProperty"],[8,40,12,0],[10,0,14,0],[10,11,14,9,"shallowCopy"],[10,22,14,0],[10,23,14,21,"x"],[10,24,14,0],[10,26,14,24],[11,0,15,2],[11,8,15,6,"Array"],[11,13,15,11],[11,14,15,12,"isArray"],[11,21,15,6],[11,22,15,20,"x"],[11,23,15,6],[11,24,15,2],[11,26,15,24],[12,0,16,4],[12,13,16,11,"x"],[12,14,16,12],[12,15,16,13,"concat"],[12,21,16,11],[12,23,16,4],[13,0,17,3],[13,5,15,2],[13,11,17,9],[13,15,17,13,"x"],[13,16,17,14],[13,20,17,18],[13,27,17,25,"x"],[13,28,17,18],[13,33,17,31],[13,41,17,9],[13,43,17,41],[14,0,18,4],[14,13,18,11,"_assign"],[14,20,18,18],[14,21,18,19],[14,25,18,23,"x"],[14,26,18,24],[14,27,18,25,"constructor"],[14,38,18,19],[14,40,18,18],[14,42,18,40,"x"],[14,43,18,18],[14,44,18,4],[15,0,19,3],[15,5,17,9],[15,11,19,9],[16,0,20,4],[16,13,20,11,"x"],[16,14,20,4],[17,0,21,3],[18,0,22,1],[20,0,24,0],[20,6,24,4,"COMMAND_PUSH"],[20,18,24,16],[20,21,24,19],[20,28,24,0],[21,0,25,0],[21,6,25,4,"COMMAND_UNSHIFT"],[21,21,25,19],[21,24,25,22],[21,34,25,0],[22,0,26,0],[22,6,26,4,"COMMAND_SPLICE"],[22,20,26,18],[22,23,26,21],[22,32,26,0],[23,0,27,0],[23,6,27,4,"COMMAND_SET"],[23,17,27,15],[23,20,27,18],[23,26,27,0],[24,0,28,0],[24,6,28,4,"COMMAND_MERGE"],[24,19,28,17],[24,22,28,20],[24,30,28,0],[25,0,29,0],[25,6,29,4,"COMMAND_APPLY"],[25,19,29,17],[25,22,29,20],[25,30,29,0],[26,0,31,0],[26,6,31,4,"ALL_COMMANDS_LIST"],[26,23,31,21],[26,26,31,24],[26,27,32,2,"COMMAND_PUSH"],[26,39,31,24],[26,41,33,2,"COMMAND_UNSHIFT"],[26,56,31,24],[26,58,34,2,"COMMAND_SPLICE"],[26,72,31,24],[26,74,35,2,"COMMAND_SET"],[26,85,31,24],[26,87,36,2,"COMMAND_MERGE"],[26,100,31,24],[26,102,37,2,"COMMAND_APPLY"],[26,115,31,24],[26,116,31,0],[27,0,40,0],[27,6,40,4,"ALL_COMMANDS_SET"],[27,22,40,20],[27,25,40,23],[27,27,40,0],[28,0,42,0,"ALL_COMMANDS_LIST"],[28,2,42,0,"ALL_COMMANDS_LIST"],[28,19,42,17],[28,20,42,18,"forEach"],[28,27,42,0],[28,28,42,26],[28,38,42,35,"command"],[28,45,42,26],[28,47,42,44],[29,0,43,2,"ALL_COMMANDS_SET"],[29,4,43,2,"ALL_COMMANDS_SET"],[29,20,43,18],[29,21,43,19,"command"],[29,28,43,18],[29,29,43,2],[29,32,43,30],[29,36,43,2],[30,0,44,1],[30,3,42,0],[32,0,46,0],[32,11,46,9,"invariantArrayCase"],[32,29,46,0],[32,30,46,28,"value"],[32,35,46,0],[32,37,46,35,"spec"],[32,41,46,0],[32,43,46,41,"command"],[32,50,46,0],[32,52,46,50],[33,0,47,2,"invariant"],[33,4,47,2,"invariant"],[33,13,47,11],[33,14,48,4,"Array"],[33,19,48,9],[33,20,48,10,"isArray"],[33,27,48,4],[33,28,48,18,"value"],[33,33,48,4],[33,34,47,11],[33,36,49,4],[33,93,47,11],[33,95,50,4,"command"],[33,102,47,11],[33,104,51,4,"value"],[33,109,47,11],[33,110,47,2],[34,0,53,2],[34,8,53,6,"specValue"],[34,17,53,15],[34,20,53,18,"spec"],[34,24,53,22],[34,25,53,23,"command"],[34,32,53,22],[34,33,53,2],[35,0,54,2,"invariant"],[35,4,54,2,"invariant"],[35,13,54,11],[35,14,55,4,"Array"],[35,19,55,9],[35,20,55,10,"isArray"],[35,27,55,4],[35,28,55,18,"specValue"],[35,37,55,4],[35,38,54,11],[35,40,56,4],[35,99,57,6],[35,151,54,11],[35,153,58,4,"command"],[35,160,54,11],[35,162,59,4,"specValue"],[35,171,54,11],[35,172,54,2],[36,0,61,1],[38,0,67,0],[38,11,67,9,"update"],[38,17,67,0],[38,18,67,16,"value"],[38,23,67,0],[38,25,67,23,"spec"],[38,29,67,0],[38,31,67,29],[39,0,68,2,"invariant"],[39,4,68,2,"invariant"],[39,13,68,11],[39,14,69,4],[39,21,69,11,"spec"],[39,25,69,4],[39,30,69,20],[39,38,68,11],[39,40,70,4],[39,116,71,6],[39,161,68,11],[39,163,72,4,"ALL_COMMANDS_LIST"],[39,180,72,21],[39,181,72,22,"join"],[39,185,72,4],[39,186,72,27],[39,190,72,4],[39,191,68,11],[39,193,73,4,"COMMAND_SET"],[39,204,68,11],[39,205,68,2],[41,0,76,2],[41,8,76,6,"hasOwnProperty"],[41,22,76,20],[41,23,76,21,"call"],[41,27,76,6],[41,28,76,26,"spec"],[41,32,76,6],[41,34,76,32,"COMMAND_SET"],[41,45,76,6],[41,46,76,2],[41,48,76,46],[42,0,77,4,"invariant"],[42,6,77,4,"invariant"],[42,15,77,13],[42,16,78,6,"Object"],[42,22,78,12],[42,23,78,13,"keys"],[42,27,78,6],[42,28,78,18,"spec"],[42,32,78,6],[42,34,78,24,"length"],[42,40,78,6],[42,45,78,35],[42,46,77,13],[42,48,79,6],[42,100,77,13],[42,102,80,6,"COMMAND_SET"],[42,113,77,13],[42,114,77,4],[43,0,83,4],[43,13,83,11,"spec"],[43,17,83,15],[43,18,83,16,"COMMAND_SET"],[43,29,83,15],[43,30,83,4],[44,0,84,3],[46,0,86,2],[46,8,86,6,"nextValue"],[46,17,86,15],[46,20,86,18,"shallowCopy"],[46,31,86,29],[46,32,86,30,"value"],[46,37,86,29],[46,38,86,2],[48,0,88,2],[48,8,88,6,"hasOwnProperty"],[48,22,88,20],[48,23,88,21,"call"],[48,27,88,6],[48,28,88,26,"spec"],[48,32,88,6],[48,34,88,32,"COMMAND_MERGE"],[48,47,88,6],[48,48,88,2],[48,50,88,48],[49,0,89,4],[49,10,89,8,"mergeObj"],[49,18,89,16],[49,21,89,19,"spec"],[49,25,89,23],[49,26,89,24,"COMMAND_MERGE"],[49,39,89,23],[49,40,89,4],[50,0,90,4,"invariant"],[50,6,90,4,"invariant"],[50,15,90,13],[50,16,91,6,"mergeObj"],[50,24,91,14],[50,28,91,18],[50,35,91,25,"mergeObj"],[50,43,91,18],[50,48,91,38],[50,56,90,13],[50,58,92,6],[50,112,90,13],[50,114,93,6,"COMMAND_MERGE"],[50,127,90,13],[50,129,94,6,"mergeObj"],[50,137,90,13],[50,138,90,4],[51,0,96,4,"invariant"],[51,6,96,4,"invariant"],[51,15,96,13],[51,16,97,6,"nextValue"],[51,25,97,15],[51,29,97,19],[51,36,97,26,"nextValue"],[51,45,97,19],[51,50,97,40],[51,58,96,13],[51,60,98,6],[51,116,96,13],[51,118,99,6,"COMMAND_MERGE"],[51,131,96,13],[51,133,100,6,"nextValue"],[51,142,96,13],[51,143,96,4],[53,0,102,4,"_assign"],[53,6,102,4,"_assign"],[53,13,102,11],[53,14,102,12,"nextValue"],[53,23,102,11],[53,25,102,23,"spec"],[53,29,102,27],[53,30,102,28,"COMMAND_MERGE"],[53,43,102,27],[53,44,102,11],[53,45,102,4],[54,0,103,3],[56,0,105,2],[56,8,105,6,"hasOwnProperty"],[56,22,105,20],[56,23,105,21,"call"],[56,27,105,6],[56,28,105,26,"spec"],[56,32,105,6],[56,34,105,32,"COMMAND_PUSH"],[56,46,105,6],[56,47,105,2],[56,49,105,47],[57,0,106,4,"invariantArrayCase"],[57,6,106,4,"invariantArrayCase"],[57,24,106,22],[57,25,106,23,"value"],[57,30,106,22],[57,32,106,30,"spec"],[57,36,106,22],[57,38,106,36,"COMMAND_PUSH"],[57,50,106,22],[57,51,106,4],[58,0,107,4,"spec"],[58,6,107,4,"spec"],[58,10,107,8],[58,11,107,9,"COMMAND_PUSH"],[58,23,107,8],[58,24,107,4],[58,25,107,23,"forEach"],[58,32,107,4],[58,33,107,31],[58,43,107,40,"item"],[58,47,107,31],[58,49,107,46],[59,0,108,6,"nextValue"],[59,8,108,6,"nextValue"],[59,17,108,15],[59,18,108,16,"push"],[59,22,108,6],[59,23,108,21,"item"],[59,27,108,6],[60,0,109,5],[60,7,107,4],[61,0,110,3],[63,0,112,2],[63,8,112,6,"hasOwnProperty"],[63,22,112,20],[63,23,112,21,"call"],[63,27,112,6],[63,28,112,26,"spec"],[63,32,112,6],[63,34,112,32,"COMMAND_UNSHIFT"],[63,49,112,6],[63,50,112,2],[63,52,112,50],[64,0,113,4,"invariantArrayCase"],[64,6,113,4,"invariantArrayCase"],[64,24,113,22],[64,25,113,23,"value"],[64,30,113,22],[64,32,113,30,"spec"],[64,36,113,22],[64,38,113,36,"COMMAND_UNSHIFT"],[64,53,113,22],[64,54,113,4],[65,0,114,4,"spec"],[65,6,114,4,"spec"],[65,10,114,8],[65,11,114,9,"COMMAND_UNSHIFT"],[65,26,114,8],[65,27,114,4],[65,28,114,26,"forEach"],[65,35,114,4],[65,36,114,34],[65,46,114,43,"item"],[65,50,114,34],[65,52,114,49],[66,0,115,6,"nextValue"],[66,8,115,6,"nextValue"],[66,17,115,15],[66,18,115,16,"unshift"],[66,25,115,6],[66,26,115,24,"item"],[66,30,115,6],[67,0,116,5],[67,7,114,4],[68,0,117,3],[70,0,119,2],[70,8,119,6,"hasOwnProperty"],[70,22,119,20],[70,23,119,21,"call"],[70,27,119,6],[70,28,119,26,"spec"],[70,32,119,6],[70,34,119,32,"COMMAND_SPLICE"],[70,48,119,6],[70,49,119,2],[70,51,119,49],[71,0,120,4,"invariant"],[71,6,120,4,"invariant"],[71,15,120,13],[71,16,121,6,"Array"],[71,21,121,11],[71,22,121,12,"isArray"],[71,29,121,6],[71,30,121,20,"value"],[71,35,121,6],[71,36,120,13],[71,38,122,6],[71,81,120,13],[71,83,123,6,"COMMAND_SPLICE"],[71,97,120,13],[71,99,124,6,"value"],[71,104,120,13],[71,105,120,4],[72,0,126,4,"invariant"],[72,6,126,4,"invariant"],[72,15,126,13],[72,16,127,6,"Array"],[72,21,127,11],[72,22,127,12,"isArray"],[72,29,127,6],[72,30,127,20,"spec"],[72,34,127,24],[72,35,127,25,"COMMAND_SPLICE"],[72,49,127,24],[72,50,127,6],[72,51,126,13],[72,53,128,6],[72,122,129,8],[72,175,126,13],[72,177,130,6,"COMMAND_SPLICE"],[72,191,126,13],[72,193,131,6,"spec"],[72,197,131,10],[72,198,131,11,"COMMAND_SPLICE"],[72,212,131,10],[72,213,126,13],[72,214,126,4],[73,0,133,4,"spec"],[73,6,133,4,"spec"],[73,10,133,8],[73,11,133,9,"COMMAND_SPLICE"],[73,25,133,8],[73,26,133,4],[73,27,133,25,"forEach"],[73,34,133,4],[73,35,133,33],[73,45,133,42,"args"],[73,49,133,33],[73,51,133,48],[74,0,134,6,"invariant"],[74,8,134,6,"invariant"],[74,17,134,15],[74,18,135,8,"Array"],[74,23,135,13],[74,24,135,14,"isArray"],[74,31,135,8],[74,32,135,22,"args"],[74,36,135,8],[74,37,134,15],[74,39,136,8],[74,108,137,10],[74,161,134,15],[74,163,138,8,"COMMAND_SPLICE"],[74,177,134,15],[74,179,139,8,"spec"],[74,183,139,12],[74,184,139,13,"COMMAND_SPLICE"],[74,198,139,12],[74,199,134,15],[74,200,134,6],[75,0,141,6,"nextValue"],[75,8,141,6,"nextValue"],[75,17,141,15],[75,18,141,16,"splice"],[75,24,141,6],[75,25,141,23,"apply"],[75,30,141,6],[75,31,141,29,"nextValue"],[75,40,141,6],[75,42,141,40,"args"],[75,46,141,6],[76,0,142,5],[76,7,133,4],[77,0,143,3],[79,0,145,2],[79,8,145,6,"hasOwnProperty"],[79,22,145,20],[79,23,145,21,"call"],[79,27,145,6],[79,28,145,26,"spec"],[79,32,145,6],[79,34,145,32,"COMMAND_APPLY"],[79,47,145,6],[79,48,145,2],[79,50,145,48],[80,0,146,4,"invariant"],[80,6,146,4,"invariant"],[80,15,146,13],[80,16,147,6],[80,23,147,13,"spec"],[80,27,147,17],[80,28,147,18,"COMMAND_APPLY"],[80,41,147,17],[80,42,147,6],[80,47,147,37],[80,57,146,13],[80,59,148,6],[80,116,146,13],[80,118,149,6,"COMMAND_APPLY"],[80,131,146,13],[80,133,150,6,"spec"],[80,137,150,10],[80,138,150,11,"COMMAND_APPLY"],[80,151,150,10],[80,152,146,13],[80,153,146,4],[81,0,152,4,"nextValue"],[81,6,152,4,"nextValue"],[81,15,152,13],[81,18,152,16,"spec"],[81,22,152,20],[81,23,152,21,"COMMAND_APPLY"],[81,36,152,20],[81,37,152,16],[81,38,152,36,"nextValue"],[81,47,152,16],[81,48,152,4],[82,0,153,3],[84,0,155,2],[84,9,155,7],[84,13,155,11,"k"],[84,14,155,2],[84,18,155,16,"spec"],[84,22,155,2],[84,24,155,22],[85,0,156,4],[85,10,156,8],[85,12,156,10,"ALL_COMMANDS_SET"],[85,28,156,26],[85,29,156,27,"hasOwnProperty"],[85,43,156,10],[85,44,156,42,"k"],[85,45,156,10],[85,50,156,48,"ALL_COMMANDS_SET"],[85,66,156,64],[85,67,156,65,"k"],[85,68,156,64],[85,69,156,8],[85,70,156,4],[85,72,156,70],[86,0,157,6,"nextValue"],[86,8,157,6,"nextValue"],[86,17,157,15],[86,18,157,16,"k"],[86,19,157,15],[86,20,157,6],[86,23,157,21,"update"],[86,29,157,27],[86,30,157,28,"value"],[86,35,157,33],[86,36,157,34,"k"],[86,37,157,33],[86,38,157,27],[86,40,157,38,"spec"],[86,44,157,42],[86,45,157,43,"k"],[86,46,157,42],[86,47,157,27],[86,48,157,6],[87,0,158,5],[88,0,159,3],[90,0,161,2],[90,11,161,9,"nextValue"],[90,20,161,2],[91,0,162,1],[93,0,164,0,"module"],[93,2,164,0,"module"],[93,8,164,6],[93,9,164,7,"exports"],[93,16,164,0],[93,19,164,17,"update"],[93,25,164,0]]},"type":"js/module"}]}