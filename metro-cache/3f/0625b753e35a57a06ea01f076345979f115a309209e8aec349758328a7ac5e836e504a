{"dependencies":[{"name":"@babel/runtime/helpers/extends","data":{"isAsync":false}},{"name":"fbjs/lib/invariant","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _extends = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/extends\");\n\n  var invariant = _$$_REQUIRE(_dependencyMap[1], \"fbjs/lib/invariant\");\n\n  var hasOwnProperty = {}.hasOwnProperty;\n\n  function shallowCopy(x) {\n    if (Array.isArray(x)) {\n      return x.concat();\n    } else if (x && typeof x === 'object') {\n      return _extends(new x.constructor(), x);\n    } else {\n      return x;\n    }\n  }\n\n  var COMMAND_PUSH = '$push';\n  var COMMAND_UNSHIFT = '$unshift';\n  var COMMAND_SPLICE = '$splice';\n  var COMMAND_SET = '$set';\n  var COMMAND_MERGE = '$merge';\n  var COMMAND_APPLY = '$apply';\n  var ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];\n  var ALL_COMMANDS_SET = {};\n  ALL_COMMANDS_LIST.forEach(function (command) {\n    ALL_COMMANDS_SET[command] = true;\n  });\n\n  function invariantArrayCase(value, spec, command) {\n    invariant(Array.isArray(value), 'update(): expected target of %s to be an array; got %s.', command, value);\n    var specValue = spec[command];\n    invariant(Array.isArray(specValue), 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue);\n  }\n\n  function update(value, spec) {\n    invariant(typeof spec === 'object', 'update(): You provided a key path to update() that did not contain one ' + 'of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET);\n\n    if (hasOwnProperty.call(spec, COMMAND_SET)) {\n      invariant(Object.keys(spec).length === 1, 'Cannot have more than one key in an object with %s', COMMAND_SET);\n      return spec[COMMAND_SET];\n    }\n\n    var nextValue = shallowCopy(value);\n\n    if (hasOwnProperty.call(spec, COMMAND_MERGE)) {\n      var mergeObj = spec[COMMAND_MERGE];\n      invariant(mergeObj && typeof mergeObj === 'object', 'update(): %s expects a spec of type \\'object\\'; got %s', COMMAND_MERGE, mergeObj);\n      invariant(nextValue && typeof nextValue === 'object', 'update(): %s expects a target of type \\'object\\'; got %s', COMMAND_MERGE, nextValue);\n\n      _extends(nextValue, spec[COMMAND_MERGE]);\n    }\n\n    if (hasOwnProperty.call(spec, COMMAND_PUSH)) {\n      invariantArrayCase(value, spec, COMMAND_PUSH);\n      spec[COMMAND_PUSH].forEach(function (item) {\n        nextValue.push(item);\n      });\n    }\n\n    if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {\n      invariantArrayCase(value, spec, COMMAND_UNSHIFT);\n      spec[COMMAND_UNSHIFT].forEach(function (item) {\n        nextValue.unshift(item);\n      });\n    }\n\n    if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {\n      invariant(Array.isArray(value), 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value);\n      invariant(Array.isArray(spec[COMMAND_SPLICE]), 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]);\n      spec[COMMAND_SPLICE].forEach(function (args) {\n        invariant(Array.isArray(args), 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]);\n        nextValue.splice.apply(nextValue, args);\n      });\n    }\n\n    if (hasOwnProperty.call(spec, COMMAND_APPLY)) {\n      invariant(typeof spec[COMMAND_APPLY] === 'function', 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]);\n      nextValue = spec[COMMAND_APPLY](nextValue);\n    }\n\n    for (var k in spec) {\n      if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n        nextValue[k] = update(value[k], spec[k]);\n      }\n    }\n\n    return nextValue;\n  }\n\n  module.exports = update;\n});","map":[[2,0,10,0],[6,0,12,0],[6,6,12,4,"invariant"],[6,15,12,13],[6,18,12,16,"require"],[6,29,12,23],[6,70,12,0],[8,0,13,0],[8,6,13,4,"hasOwnProperty"],[8,20,13,18],[8,23,13,21],[8,26,13,24,"hasOwnProperty"],[8,40,13,0],[10,0,15,0],[10,11,15,9,"shallowCopy"],[10,22,15,0],[10,23,15,21,"x"],[10,24,15,0],[10,26,15,24],[11,0,16,2],[11,8,16,6,"Array"],[11,13,16,11],[11,14,16,12,"isArray"],[11,21,16,6],[11,22,16,20,"x"],[11,23,16,6],[11,24,16,2],[11,26,16,24],[12,0,17,4],[12,13,17,11,"x"],[12,14,17,12],[12,15,17,13,"concat"],[12,21,17,11],[12,23,17,4],[13,0,18,3],[13,5,16,2],[13,11,18,9],[13,15,18,13,"x"],[13,16,18,14],[13,20,18,18],[13,27,18,25,"x"],[13,28,18,18],[13,33,18,31],[13,41,18,9],[13,43,18,41],[14,0,19,4],[14,13,19,11],[14,22,19,25],[14,26,19,29,"x"],[14,27,19,30],[14,28,19,31,"constructor"],[14,39,19,25],[14,41,19,11],[14,43,19,46,"x"],[14,44,19,11],[14,45,19,4],[15,0,20,3],[15,5,18,9],[15,11,20,9],[16,0,21,4],[16,13,21,11,"x"],[16,14,21,4],[17,0,22,3],[18,0,23,1],[20,0,25,0],[20,6,25,4,"COMMAND_PUSH"],[20,18,25,16],[20,21,25,19],[20,28,25,0],[21,0,26,0],[21,6,26,4,"COMMAND_UNSHIFT"],[21,21,26,19],[21,24,26,22],[21,34,26,0],[22,0,27,0],[22,6,27,4,"COMMAND_SPLICE"],[22,20,27,18],[22,23,27,21],[22,32,27,0],[23,0,28,0],[23,6,28,4,"COMMAND_SET"],[23,17,28,15],[23,20,28,18],[23,26,28,0],[24,0,29,0],[24,6,29,4,"COMMAND_MERGE"],[24,19,29,17],[24,22,29,20],[24,30,29,0],[25,0,30,0],[25,6,30,4,"COMMAND_APPLY"],[25,19,30,17],[25,22,30,20],[25,30,30,0],[26,0,32,0],[26,6,32,4,"ALL_COMMANDS_LIST"],[26,23,32,21],[26,26,32,24],[26,27,33,2,"COMMAND_PUSH"],[26,39,32,24],[26,41,34,2,"COMMAND_UNSHIFT"],[26,56,32,24],[26,58,35,2,"COMMAND_SPLICE"],[26,72,32,24],[26,74,36,2,"COMMAND_SET"],[26,85,32,24],[26,87,37,2,"COMMAND_MERGE"],[26,100,32,24],[26,102,38,2,"COMMAND_APPLY"],[26,115,32,24],[26,116,32,0],[27,0,41,0],[27,6,41,4,"ALL_COMMANDS_SET"],[27,22,41,20],[27,25,41,23],[27,27,41,0],[28,0,43,0,"ALL_COMMANDS_LIST"],[28,2,43,0,"ALL_COMMANDS_LIST"],[28,19,43,17],[28,20,43,18,"forEach"],[28,27,43,0],[28,28,43,26],[28,38,43,35,"command"],[28,45,43,26],[28,47,43,44],[29,0,44,2,"ALL_COMMANDS_SET"],[29,4,44,2,"ALL_COMMANDS_SET"],[29,20,44,18],[29,21,44,19,"command"],[29,28,44,18],[29,29,44,2],[29,32,44,30],[29,36,44,2],[30,0,45,1],[30,3,43,0],[32,0,47,0],[32,11,47,9,"invariantArrayCase"],[32,29,47,0],[32,30,47,28,"value"],[32,35,47,0],[32,37,47,35,"spec"],[32,41,47,0],[32,43,47,41,"command"],[32,50,47,0],[32,52,47,50],[33,0,48,2,"invariant"],[33,4,48,2,"invariant"],[33,13,48,11],[33,14,49,4,"Array"],[33,19,49,9],[33,20,49,10,"isArray"],[33,27,49,4],[33,28,49,18,"value"],[33,33,49,4],[33,34,48,11],[33,36,50,4],[33,93,48,11],[33,95,51,4,"command"],[33,102,48,11],[33,104,52,4,"value"],[33,109,48,11],[33,110,48,2],[34,0,54,2],[34,8,54,6,"specValue"],[34,17,54,15],[34,20,54,18,"spec"],[34,24,54,22],[34,25,54,23,"command"],[34,32,54,22],[34,33,54,2],[35,0,55,2,"invariant"],[35,4,55,2,"invariant"],[35,13,55,11],[35,14,56,4,"Array"],[35,19,56,9],[35,20,56,10,"isArray"],[35,27,56,4],[35,28,56,18,"specValue"],[35,37,56,4],[35,38,55,11],[35,40,57,4],[35,99,58,4],[35,151,55,11],[35,153,59,4,"command"],[35,160,55,11],[35,162,60,4,"specValue"],[35,171,55,11],[35,172,55,2],[36,0,62,1],[38,0,68,0],[38,11,68,9,"update"],[38,17,68,0],[38,18,68,16,"value"],[38,23,68,0],[38,25,68,23,"spec"],[38,29,68,0],[38,31,68,29],[39,0,69,2,"invariant"],[39,4,69,2,"invariant"],[39,13,69,11],[39,14,70,4],[39,21,70,11,"spec"],[39,25,70,4],[39,30,70,20],[39,38,69,11],[39,40,71,4],[39,116,72,4],[39,161,69,11],[39,163,73,4,"ALL_COMMANDS_LIST"],[39,180,73,21],[39,181,73,22,"join"],[39,185,73,4],[39,186,73,27],[39,190,73,4],[39,191,69,11],[39,193,74,4,"COMMAND_SET"],[39,204,69,11],[39,205,69,2],[41,0,77,2],[41,8,77,6,"hasOwnProperty"],[41,22,77,20],[41,23,77,21,"call"],[41,27,77,6],[41,28,77,26,"spec"],[41,32,77,6],[41,34,77,32,"COMMAND_SET"],[41,45,77,6],[41,46,77,2],[41,48,77,46],[42,0,78,4,"invariant"],[42,6,78,4,"invariant"],[42,15,78,13],[42,16,79,6,"Object"],[42,22,79,12],[42,23,79,13,"keys"],[42,27,79,6],[42,28,79,18,"spec"],[42,32,79,6],[42,34,79,24,"length"],[42,40,79,6],[42,45,79,35],[42,46,78,13],[42,48,80,6],[42,100,78,13],[42,102,81,6,"COMMAND_SET"],[42,113,78,13],[42,114,78,4],[43,0,84,4],[43,13,84,11,"spec"],[43,17,84,15],[43,18,84,16,"COMMAND_SET"],[43,29,84,15],[43,30,84,4],[44,0,85,3],[46,0,87,2],[46,8,87,6,"nextValue"],[46,17,87,15],[46,20,87,18,"shallowCopy"],[46,31,87,29],[46,32,87,30,"value"],[46,37,87,29],[46,38,87,2],[48,0,89,2],[48,8,89,6,"hasOwnProperty"],[48,22,89,20],[48,23,89,21,"call"],[48,27,89,6],[48,28,89,26,"spec"],[48,32,89,6],[48,34,89,32,"COMMAND_MERGE"],[48,47,89,6],[48,48,89,2],[48,50,89,48],[49,0,90,4],[49,10,90,8,"mergeObj"],[49,18,90,16],[49,21,90,19,"spec"],[49,25,90,23],[49,26,90,24,"COMMAND_MERGE"],[49,39,90,23],[49,40,90,4],[50,0,91,4,"invariant"],[50,6,91,4,"invariant"],[50,15,91,13],[50,16,92,6,"mergeObj"],[50,24,92,14],[50,28,92,18],[50,35,92,25,"mergeObj"],[50,43,92,18],[50,48,92,38],[50,56,91,13],[50,58,93,6],[50,114,91,13],[50,116,94,6,"COMMAND_MERGE"],[50,129,91,13],[50,131,95,6,"mergeObj"],[50,139,91,13],[50,140,91,4],[51,0,97,4,"invariant"],[51,6,97,4,"invariant"],[51,15,97,13],[51,16,98,6,"nextValue"],[51,25,98,15],[51,29,98,19],[51,36,98,26,"nextValue"],[51,45,98,19],[51,50,98,40],[51,58,97,13],[51,60,99,6],[51,118,97,13],[51,120,100,6,"COMMAND_MERGE"],[51,133,97,13],[51,135,101,6,"nextValue"],[51,144,97,13],[51,145,97,4],[53,0,103,4],[53,15,103,18,"nextValue"],[53,24,103,4],[53,26,103,29,"spec"],[53,30,103,33],[53,31,103,34,"COMMAND_MERGE"],[53,44,103,33],[53,45,103,4],[54,0,104,3],[56,0,106,2],[56,8,106,6,"hasOwnProperty"],[56,22,106,20],[56,23,106,21,"call"],[56,27,106,6],[56,28,106,26,"spec"],[56,32,106,6],[56,34,106,32,"COMMAND_PUSH"],[56,46,106,6],[56,47,106,2],[56,49,106,47],[57,0,107,4,"invariantArrayCase"],[57,6,107,4,"invariantArrayCase"],[57,24,107,22],[57,25,107,23,"value"],[57,30,107,22],[57,32,107,30,"spec"],[57,36,107,22],[57,38,107,36,"COMMAND_PUSH"],[57,50,107,22],[57,51,107,4],[58,0,108,4,"spec"],[58,6,108,4,"spec"],[58,10,108,8],[58,11,108,9,"COMMAND_PUSH"],[58,23,108,8],[58,24,108,4],[58,25,108,23,"forEach"],[58,32,108,4],[58,33,108,31],[58,43,108,40,"item"],[58,47,108,31],[58,49,108,46],[59,0,109,6,"nextValue"],[59,8,109,6,"nextValue"],[59,17,109,15],[59,18,109,16,"push"],[59,22,109,6],[59,23,109,21,"item"],[59,27,109,6],[60,0,110,5],[60,7,108,4],[61,0,111,3],[63,0,113,2],[63,8,113,6,"hasOwnProperty"],[63,22,113,20],[63,23,113,21,"call"],[63,27,113,6],[63,28,113,26,"spec"],[63,32,113,6],[63,34,113,32,"COMMAND_UNSHIFT"],[63,49,113,6],[63,50,113,2],[63,52,113,50],[64,0,114,4,"invariantArrayCase"],[64,6,114,4,"invariantArrayCase"],[64,24,114,22],[64,25,114,23,"value"],[64,30,114,22],[64,32,114,30,"spec"],[64,36,114,22],[64,38,114,36,"COMMAND_UNSHIFT"],[64,53,114,22],[64,54,114,4],[65,0,115,4,"spec"],[65,6,115,4,"spec"],[65,10,115,8],[65,11,115,9,"COMMAND_UNSHIFT"],[65,26,115,8],[65,27,115,4],[65,28,115,26,"forEach"],[65,35,115,4],[65,36,115,34],[65,46,115,43,"item"],[65,50,115,34],[65,52,115,49],[66,0,116,6,"nextValue"],[66,8,116,6,"nextValue"],[66,17,116,15],[66,18,116,16,"unshift"],[66,25,116,6],[66,26,116,24,"item"],[66,30,116,6],[67,0,117,5],[67,7,115,4],[68,0,118,3],[70,0,120,2],[70,8,120,6,"hasOwnProperty"],[70,22,120,20],[70,23,120,21,"call"],[70,27,120,6],[70,28,120,26,"spec"],[70,32,120,6],[70,34,120,32,"COMMAND_SPLICE"],[70,48,120,6],[70,49,120,2],[70,51,120,49],[71,0,121,4,"invariant"],[71,6,121,4,"invariant"],[71,15,121,13],[71,16,122,6,"Array"],[71,21,122,11],[71,22,122,12,"isArray"],[71,29,122,6],[71,30,122,20,"value"],[71,35,122,6],[71,36,121,13],[71,38,123,6],[71,81,121,13],[71,83,124,6,"COMMAND_SPLICE"],[71,97,121,13],[71,99,125,6,"value"],[71,104,121,13],[71,105,121,4],[72,0,127,4,"invariant"],[72,6,127,4,"invariant"],[72,15,127,13],[72,16,128,6,"Array"],[72,21,128,11],[72,22,128,12,"isArray"],[72,29,128,6],[72,30,128,20,"spec"],[72,34,128,24],[72,35,128,25,"COMMAND_SPLICE"],[72,49,128,24],[72,50,128,6],[72,51,127,13],[72,53,129,6],[72,122,130,6],[72,175,127,13],[72,177,131,6,"COMMAND_SPLICE"],[72,191,127,13],[72,193,132,6,"spec"],[72,197,132,10],[72,198,132,11,"COMMAND_SPLICE"],[72,212,132,10],[72,213,127,13],[72,214,127,4],[73,0,134,4,"spec"],[73,6,134,4,"spec"],[73,10,134,8],[73,11,134,9,"COMMAND_SPLICE"],[73,25,134,8],[73,26,134,4],[73,27,134,25,"forEach"],[73,34,134,4],[73,35,134,33],[73,45,134,42,"args"],[73,49,134,33],[73,51,134,48],[74,0,135,6,"invariant"],[74,8,135,6,"invariant"],[74,17,135,15],[74,18,136,8,"Array"],[74,23,136,13],[74,24,136,14,"isArray"],[74,31,136,8],[74,32,136,22,"args"],[74,36,136,8],[74,37,135,15],[74,39,137,8],[74,108,138,8],[74,161,135,15],[74,163,139,8,"COMMAND_SPLICE"],[74,177,135,15],[74,179,140,8,"spec"],[74,183,140,12],[74,184,140,13,"COMMAND_SPLICE"],[74,198,140,12],[74,199,135,15],[74,200,135,6],[75,0,142,6,"nextValue"],[75,8,142,6,"nextValue"],[75,17,142,15],[75,18,142,16,"splice"],[75,24,142,6],[75,25,142,23,"apply"],[75,30,142,6],[75,31,142,29,"nextValue"],[75,40,142,6],[75,42,142,40,"args"],[75,46,142,6],[76,0,143,5],[76,7,134,4],[77,0,144,3],[79,0,146,2],[79,8,146,6,"hasOwnProperty"],[79,22,146,20],[79,23,146,21,"call"],[79,27,146,6],[79,28,146,26,"spec"],[79,32,146,6],[79,34,146,32,"COMMAND_APPLY"],[79,47,146,6],[79,48,146,2],[79,50,146,48],[80,0,147,4,"invariant"],[80,6,147,4,"invariant"],[80,15,147,13],[80,16,148,6],[80,23,148,13,"spec"],[80,27,148,17],[80,28,148,18,"COMMAND_APPLY"],[80,41,148,17],[80,42,148,6],[80,47,148,37],[80,57,147,13],[80,59,149,6],[80,116,147,13],[80,118,150,6,"COMMAND_APPLY"],[80,131,147,13],[80,133,151,6,"spec"],[80,137,151,10],[80,138,151,11,"COMMAND_APPLY"],[80,151,151,10],[80,152,147,13],[80,153,147,4],[81,0,153,4,"nextValue"],[81,6,153,4,"nextValue"],[81,15,153,13],[81,18,153,16,"spec"],[81,22,153,20],[81,23,153,21,"COMMAND_APPLY"],[81,36,153,20],[81,37,153,16],[81,38,153,36,"nextValue"],[81,47,153,16],[81,48,153,4],[82,0,154,3],[84,0,156,2],[84,9,156,7],[84,13,156,11,"k"],[84,14,156,2],[84,18,156,16,"spec"],[84,22,156,2],[84,24,156,22],[85,0,157,4],[85,10,157,8],[85,12,157,10,"ALL_COMMANDS_SET"],[85,28,157,26],[85,29,157,27,"hasOwnProperty"],[85,43,157,10],[85,44,157,42,"k"],[85,45,157,10],[85,50,157,48,"ALL_COMMANDS_SET"],[85,66,157,64],[85,67,157,65,"k"],[85,68,157,64],[85,69,157,8],[85,70,157,4],[85,72,157,70],[86,0,158,6,"nextValue"],[86,8,158,6,"nextValue"],[86,17,158,15],[86,18,158,16,"k"],[86,19,158,15],[86,20,158,6],[86,23,158,21,"update"],[86,29,158,27],[86,30,158,28,"value"],[86,35,158,33],[86,36,158,34,"k"],[86,37,158,33],[86,38,158,27],[86,40,158,38,"spec"],[86,44,158,42],[86,45,158,43,"k"],[86,46,158,42],[86,47,158,27],[86,48,158,6],[87,0,159,5],[88,0,160,3],[90,0,162,2],[90,11,162,9,"nextValue"],[90,20,162,2],[91,0,163,1],[93,0,165,0,"module"],[93,2,165,0,"module"],[93,8,165,6],[93,9,165,7,"exports"],[93,16,165,0],[93,19,165,17,"update"],[93,25,165,0]]},"type":"js/module"}]}